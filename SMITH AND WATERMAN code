#____________________Pushkin Rathore_______#
####----------------SMITH AND WATERMAN------#



# Importing Modules
import numpy as np

#Ask for sequences from the user
sequence_1 = input("Enter or paste sequence 1:")
sequence_2 = input("Enter or paste sequence 2:")

#sequence_1 = "ATCGT"
#sequence_2 = "ACGT"

#Creat Matrices
main_matrix = np.zeros((len(sequence_1)+1,len(sequence_2)+1))
match_checker_matrix = np.zeros((len(sequence_1),len(sequence_2)))

# Providing the scores for match ,mismatch and gap
match_reward = 1
mismatch_penalty = -1
gap_penalty = -2

#Fill the match checker matrix accrording to match or mismatch
for i in range(len(sequence_1)):
    for j in range(len(sequence_2)):
        if sequence_1[i] == sequence_2[j]:
            match_checker_matrix[i][j]= match_reward
        else:
            match_checker_matrix[i][j]= mismatch_penalty

print(match_checker_matrix)

#Filling up the matrix using Needleman_Wunsch algorithm
#STEP 1 : Initialisation
for i in range(len(sequence_1)+1):
    main_matrix[i][0] = 0
for j in range(len(sequence_2)+1):
    main_matrix[0][j] = 0

#STEP 2 : Matrix Filling
for i in range(1,len(sequence_1)+1):
    for j in range(1,len(sequence_2)+1):
        main_matrix[i][j] = max(main_matrix[i-1][j-1]+match_checker_matrix[i-1][j-1],
                                main_matrix[i-1][j]+gap_penalty,
                                main_matrix[i][j-1]+ gap_penalty,0)

print(main_matrix)
result = np.where(main_matrix == np.amax(main_matrix))
listOfCordinates = list(zip(result[0], result[1]))
# STEP 3 : Traceback
print (np.amax(main_matrix))
aligned_1 = ""
aligned_2 = ""

ti = result[0][0]
tj = result[1][0]
print (ti)
print (tj)
while(ti >0 and tj > 0):

    if (ti > 0 and tj > 0 and main_matrix[ti][tj] == (main_matrix[ti-1][tj-1] + 1) ):

        aligned_1 = sequence_1[ti-1] + aligned_1
        aligned_2 = sequence_2[tj-1] + aligned_2

        ti = ti - 1
        tj = tj - 1
    
    elif(ti > 0 and tj > 0 and main_matrix[ti-1][tj-1] == 0):
        ti = 0
        tj = 0

#test
print(aligned_1)
print(aligned_2)

# Working :)
